// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ilnurmamatkazin/go-devops/cmd/server/models"
)

// MockMetric is a mock of Metric interface.
type MockMetric struct {
	ctrl     *gomock.Controller
	recorder *MockMetricMockRecorder
}

// MockMetricMockRecorder is the mock recorder for MockMetric.
type MockMetricMockRecorder struct {
	mock *MockMetric
}

// NewMockMetric creates a new mock instance.
func NewMockMetric(ctrl *gomock.Controller) *MockMetric {
	mock := &MockMetric{ctrl: ctrl}
	mock.recorder = &MockMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetric) EXPECT() *MockMetricMockRecorder {
	return m.recorder
}

// GetInfo mocks base method.
func (m *MockMetric) GetInfo() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockMetricMockRecorder) GetInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockMetric)(nil).GetInfo))
}

// GetMetric mocks base method.
func (m *MockMetric) GetMetric(metric *models.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockMetricMockRecorder) GetMetric(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockMetric)(nil).GetMetric), metric)
}

// GetOldMetric mocks base method.
func (m *MockMetric) GetOldMetric(metric *models.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOldMetric", metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOldMetric indicates an expected call of GetOldMetric.
func (mr *MockMetricMockRecorder) GetOldMetric(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOldMetric", reflect.TypeOf((*MockMetric)(nil).GetOldMetric), metric)
}

// Ping mocks base method.
func (m *MockMetric) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMetricMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMetric)(nil).Ping))
}

// SetArrayMetrics mocks base method.
func (m *MockMetric) SetArrayMetrics(metrics []models.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetArrayMetrics", metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetArrayMetrics indicates an expected call of SetArrayMetrics.
func (mr *MockMetricMockRecorder) SetArrayMetrics(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArrayMetrics", reflect.TypeOf((*MockMetric)(nil).SetArrayMetrics), metrics)
}

// SetMetric mocks base method.
func (m *MockMetric) SetMetric(metric models.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMetric", metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMetric indicates an expected call of SetMetric.
func (mr *MockMetricMockRecorder) SetMetric(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetric", reflect.TypeOf((*MockMetric)(nil).SetMetric), metric)
}

// SetOldMetric mocks base method.
func (m *MockMetric) SetOldMetric(metric models.Metric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOldMetric", metric)
}

// SetOldMetric indicates an expected call of SetOldMetric.
func (mr *MockMetricMockRecorder) SetOldMetric(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOldMetric", reflect.TypeOf((*MockMetric)(nil).SetOldMetric), metric)
}
